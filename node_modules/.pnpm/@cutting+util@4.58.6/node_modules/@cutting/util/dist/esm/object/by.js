import { isNil } from './isNil.js';
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
export const keyBy = (array, key) => (array || []).reduce((r, x) => ({ ...r, [(key ? x[key] : x)]: x }), {});
export const pickBy = (o, predicate) => {
    if (isNil(o)) {
        return o;
    }
    const ret = {};
    for (const [key, value] of Object.entries(o)) {
        if (isNil(value) || !!predicate(value) === false) {
            continue;
        }
        ret[key] = value;
    }
    return ret;
};
export const countBy = (o, predicate) => {
    const ret = {};
    for (const [, value] of Object.entries(o)) {
        const result = predicate(value);
        if (!ret[result]) {
            ret[result] = 0;
        }
        if (Boolean(value) === false || typeof result === 'undefined' || result === null) {
            continue;
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        ret[result]++;
    }
    return ret;
};
export const sortBy = (o, selector) => {
    if (isNil(o)) {
        return [];
    }
    const result = o.slice(0);
    result.sort((x, y) => {
        const a = selector(x);
        const b = selector(y);
        return a > b ? 1 : a < b ? -1 : 0;
    });
    return result;
};
export const uniqBy = (list, selector) => {
    const ret = [];
    const set = new Set();
    for (const item of list) {
        const value = selector(item);
        if (set.has(value) === false) {
            set.add(value);
            ret.push(item);
        }
    }
    return ret;
};
export const sortedUniqBy = (o, selector) => {
    return uniqBy(sortBy(o, selector), selector);
};
export const groupBy = (o, selector) => {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return o.reduce((acc, item) => {
        const key = selector(item);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return Object.assign(acc, { [key]: (acc[key] || []).concat(item) });
    }, {});
};
//# sourceMappingURL=by.js.map