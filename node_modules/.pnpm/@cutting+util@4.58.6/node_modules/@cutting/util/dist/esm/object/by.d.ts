import type { DeepPartial } from '../types/DeepPartial.js';
export type PropertyReturn = string | number | symbol;
export declare const keyBy: <T, K extends keyof T & string>(array: T[], key: K) => {};
export declare const pickBy: <T extends Record<keyof T & string, unknown>>(o: T, predicate: (value: T[keyof T]) => PropertyReturn | boolean) => DeepPartial<T> | null | undefined;
export declare const countBy: <T>(o: T[], predicate: (o: T[keyof T]) => keyof T & string) => DeepPartial<Record<keyof T, number>>;
export declare const sortBy: <T, R>(o: T[], selector: (item: T) => R) => T[];
export declare const uniqBy: <T, R>(list: T[], selector: (item: T) => R) => T[];
export declare const sortedUniqBy: <T, R>(o: T[], selector: (item: T) => R) => T[];
export declare const groupBy: <T>(o: T[], selector: (item: T) => T) => {
    [key: string]: T[];
};
//# sourceMappingURL=by.d.ts.map